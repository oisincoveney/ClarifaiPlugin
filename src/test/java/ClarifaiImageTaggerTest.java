/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import clarifai2.api.ClarifaiBuilder;
import clarifai2.api.ClarifaiClient;
import clarifai2.api.request.model.PredictRequest;
import clarifai2.dto.input.ClarifaiImage;
import clarifai2.dto.input.ClarifaiInput;
import clarifai2.dto.model.output.ClarifaiOutput;
import clarifai2.dto.prediction.Concept;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.net.URLConnection;
import java.util.List;

import static org.junit.Assert.*;

@FixMethodOrder ( MethodSorters.NAME_ASCENDING )
public class ClarifaiImageTaggerTest
{

    /**
     * App ID and secret keys for accessing the Clarifai API. These keys are checked in the
     * areCredentialsSet() and areCredentialsValid() methods
     */
    private static final String CLIENT_ID     = "Bcbz-_jshQ9jSIKeIlE3BtHQzMFDc6l7mFUkC9-A";
    private static final String CLIENT_SECRET = "Ou_qSgYx-iIvZLswzJrGzBWl8rfmZ1jcW6-DmcNV";

    /**
     * A list of the image files found in the /test/resources/ folder that will be tested
     * against Clarifai's prediction API
     */
    private static final String[] imageFiles = {"cricket.jpeg", "deer.jpeg", "soccer.jpeg"};


    /**
     * Pings google.com to check if an internet connection exists, so the next methods can
     * proceed without worry of a network timeout
     */
    @Test
    public void aConnectionExists ()
    {
        try
        {
            URL           url        = new URL("http://www.google.com");
            URLConnection connection = url.openConnection();
            connection.connect();
        }
        catch ( IOException e )
        {
            e.printStackTrace();
        }
    }

    /**
     * Checks if the user's credentials are empty and have been set
     */
    @Test
    public void areCredentialsSet ()
    {
        // TODO : Convert to API Keys when Clarifai releases a Java API Key client
        assertFalse("Client ID token has not been set", CLIENT_ID.isEmpty());
        assertFalse("Client secret token has not been set", CLIENT_SECRET.isEmpty());
    }

    /**
     * Checks if the ClarifaiClient can access Clarifai services with the given credentials
     *
     * @throws clarifai2.exception.ClarifaiException -> if the App ID or Secret are not valid
     */
    @Test
    public void areCredentialsValid ()
    {
        // TODO : Convert to API Keys when Clarifai releases a Java API Key client
        new ClarifaiBuilder(CLIENT_ID, CLIENT_SECRET).buildSync();
    }


    /**
     * Calls the generateImageFilePaths() and checkValidTags() methods to determine if Clarifai's
     * processing of local images works
     */
    @Test
    public void checkImageBytesTagging ()
    {
        assertTrue(checkValidTags(generateImageFilePaths()));
    }

    /**
     * Calls the generateImageURLs() and checkValidTags() methods to determine if Clarifai's
     * processing of random internet images works
     */
    @Test
    public void checkURLImageTagging ()
    {
        assertTrue(checkValidTags(generateImageURLs()));
    }

    /**
     * generateImageURLs() creates an array of ClarifaiInput objects containing ClarifaiImages
     * of different images from http://www.lorempixel.com , an aggregator of random, fair-use
     * images.
     *
     * @return an array of 10 ClarifaiInput objects containing ClarifaiImages from lorempixel.com
     */
    private ClarifaiInput[] generateImageURLs ()
    {
        ClarifaiInput[] inputs = new ClarifaiInput[10];

        for ( int i = 0; i < 10; i++ )
            inputs[i] = ClarifaiInput.forImage(ClarifaiImage.of("http://lorempixel.com/500/500"));

        return inputs;
    }

    /**
     * generateImageFilePaths() creates an array of ClarifaiInput objects containing
     * ClarifaiImages of .jpeg pictures in the test/resources folder.
     *
     * @return an array containing ClarifaiInput objects containing ClarifaiImages from the test/resources folder
     */
    private ClarifaiInput[] generateImageFilePaths ()
    {
        ClarifaiInput[] inputs = new ClarifaiInput[imageFiles.length];

        for ( int i = 0; i < imageFiles.length; i++ )
        {
            //Gets the picture file from the test/resources folder
            File file = new File(getClass().getResource(imageFiles[i]).getFile());
            inputs[i] = ClarifaiInput.forImage(ClarifaiImage.of(file));
        }

        return inputs;

    }

    /**
     * checkValidTags() takes a ClarifaiInput array and checks if valid tags were created
     * by the Clarifai API prediction service.
     * <p>
     * The method send the ClarifaiInput objects to the API server, which returns a list of
     * ClarifaiOutput objects that contain the tags for the images in the original array.
     * The method then checks if the status each element of this list contains a tag
     * indicating that the prediction was valid.
     *
     * @param inputs -> a ClarifaiInput array, which should contain valid ClarifaiImage objects
     * @return true if all ClarifaiOutput objects are valid. Otherwise, will throw a JUnit exception
     */
    private boolean checkValidTags ( ClarifaiInput[] inputs )
    {
        //Create the client and prediction request
        ClarifaiClient           client         = ( new ClarifaiBuilder(CLIENT_ID, CLIENT_SECRET) ).buildSync();
        PredictRequest <Concept> predictRequest = client.getDefaultModels().generalModel().predict().withInputs(inputs);

        //Gets the tags
        List <ClarifaiOutput <Concept>> output = predictRequest.executeSync().get();

        //Checks each output to see if tags were returned
        for ( ClarifaiOutput <Concept> concept : output )
        {
            assertEquals("Clarifai output not correct.", "Ok", concept.status().description());
        }

        return true;
    }
}
